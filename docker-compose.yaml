version: "3.8"

x-airflow-common:
  &airflow-common
  build: ./airflow/
  # image: ${AIRFLOW_IMAGE_NAME:-extended_airflow:latest}
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:latest}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    AIRFLOW_CONN_AWS_S3: ${AIRFLOW_CONN_AWS_S3}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    build: ./postgresql/
    ports:
      - 7777:5432
    networks:
      - backend
    volumes:
      # - ./postgres:/docker-entrypoint-initdb.d
      - ./postgresql/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: always
  # app :
  #   build: ./app/
  #   depends_on:
  #     - db      
  #   networks:
  #     - backend
  adminer:
    image: adminer
    restart: always
    ports:
      - 9999:8080
    networks:
     - backend 
    depends_on:
      - postgres

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 18080:8080
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    networks:
      - backend

  airflow-init:
    <<: *airflow-common
    command: version
    networks:
      - backend
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

networks:
  backend:
    driver: bridge

